/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation AdminClearCache($input: ClearCacheInput!) {\n    adminClearCache(input: $input) {\n      success\n    }\n  }\n": types.AdminClearCacheDocument,
    "\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Register($input: RegisterInput!) {\n    register(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n": types.RegisterDocument,
    "\n  mutation ActOnAutoCollects($input: ActOnAutoCollectsInput!) {\n    actOnAutoCollects(input: $input) {\n      success\n    }\n  }\n": types.ActOnAutoCollectsDocument,
    "\n  query AutoCollects($input: UserCollectionsInput!) {\n    autoCollects(input: $input) {\n      items {\n        name\n        id\n        image\n        preview {\n          attachment {\n            attachment\n          }\n        }\n        shareLink\n        userId\n        users {\n          id\n          user {\n            username\n            id\n          }\n        }\n        itemCount\n        autoCollectApprovals {\n          attachment {\n            attachment\n            id\n            name\n            originalFilename\n            type\n            userId\n            createdAt\n            fileSize\n            textMetadata\n            collections {\n              name\n              id\n            }\n            starred {\n              id\n            }\n          }\n          id\n          autoCollectRuleId\n          autoCollectRule {\n            name\n          }\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n": types.AutoCollectsDocument,
    "\n  query AutoCollectRules {\n    autoCollectRules {\n      id\n      name\n      enabled\n      collectionId\n    }\n  }\n": types.AutoCollectRulesDocument,
    "\n  query AutoCollectRule($input: AutoCollectRuleQueryInput!) {\n    autoCollectRule(input: $input) {\n      id\n      name\n      enabled\n      collectionId\n      requireApproval\n      rules {\n        id\n        rules {\n          id\n          type\n          value\n          operator\n        }\n      }\n    }\n  }\n": types.AutoCollectRuleDocument,
    "\n  mutation AddChatUsers($input: AddChatUser!) {\n    addChatUsers(input: $input) {\n      success\n    }\n  }\n": types.AddChatUsersDocument,
    "\n  query ChatAuditLog($input: AuditLogInput!) {\n    chatAuditLog(input: $input) {\n      items {\n        id\n        userId\n        chatId\n        category\n        actionType\n        message\n        createdAt\n        updatedAt\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n": types.ChatAuditLogDocument,
    "\n  query ChatsQuery {\n    userEmoji {\n      id\n      userId\n      chatId\n      icon\n      name\n      createdAt\n      updatedAt\n    }\n    chats {\n      id\n      description\n      type\n      background\n      unread\n      name\n      userId\n      icon\n      createdAt\n      updatedAt\n      legacyUserId\n      invites {\n        id\n        userId\n        createdAt\n        rankId\n        updatedAt\n        expiredAt\n        invalidated\n      }\n      association {\n        id\n        hidden\n        chatId\n        permissions\n        userId\n        rank\n        createdAt\n        lastRead\n        notifications\n        legacyUserId\n      }\n      users {\n        id\n        chatId\n        userId\n        rank\n        createdAt\n        lastRead\n        legacyUserId\n        ranksMap\n      }\n      _redisSortDate\n      recipient {\n        id\n      }\n      ranks {\n        id\n        color\n        name\n        userId\n        createdAt\n        chatId\n        updatedAt\n        managed\n        index\n        permissionsMap\n      }\n    }\n  }\n": types.ChatsQueryDocument,
    "\n  mutation CreateChat($input: CreateChatInput!) {\n    createChat(input: $input) {\n      id\n      association {\n        id\n      }\n    }\n  }\n": types.CreateChatDocument,
    "\n  mutation AddChatRank($input: CreateRank!) {\n    addChatRank(input: $input) {\n      id\n    }\n  }\n": types.AddChatRankDocument,
    "\n  mutation DeleteEmoji($input: DeleteEmojiInput!) {\n    deleteEmoji(input: $input) {\n      success\n    }\n  }\n": types.DeleteEmojiDocument,
    "\n  mutation DeleteGroup($input: DangerZoneChatInput!) {\n    deleteGroup(input: $input) {\n      success\n    }\n  }\n": types.DeleteGroupDocument,
    "\n  mutation LeaveChat($input: LeaveChatInput!) {\n    leaveChat(input: $input) {\n      success\n    }\n  }\n": types.LeaveChatDocument,
    "\n  mutation InvalidateChatInvite($input: InvalidateInviteInput!) {\n    invalidateChatInvite(input: $input) {\n      success\n    }\n  }\n": types.InvalidateChatInviteDocument,
    "\n  mutation DeleteChatRank($input: DeleteRank!) {\n    deleteChatRank(input: $input) {\n      success\n    }\n  }\n": types.DeleteChatRankDocument,
    "\n  query ChatInvite($input: InviteInput!) {\n    chatInvite(input: $input) {\n      id\n      userId\n      chatId\n      rankId\n      createdAt\n      updatedAt\n      expiredAt\n      invalidated\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      chat {\n        id\n        name\n        users {\n          id\n        }\n        description\n        background\n        icon\n        type\n      }\n      rank {\n        id\n        color\n        name\n      }\n    }\n  }\n": types.ChatInviteDocument,
    "\n  query GetInvitesForChat($input: ChatInput!) {\n    chat(input: $input) {\n      invites {\n        id\n        userId\n        createdAt\n        rankId\n        updatedAt\n        expiredAt\n        invalidated\n      }\n    }\n  }\n": types.GetInvitesForChatDocument,
    "\n  mutation JoinChatFromInvite($input: JoinChatFromInviteInput!) {\n    joinChatFromInvite(input: $input) {\n      id\n    }\n  }\n": types.JoinChatFromInviteDocument,
    "\n  mutation CreateChatInvite($input: CreateInviteInput!) {\n    createChatInvite(input: $input) {\n      id\n      userId\n      chatId\n      rankId\n      createdAt\n      updatedAt\n      expiredAt\n      invalidated\n    }\n  }\n": types.CreateChatInviteDocument,
    "\n  fragment StandardEmbed on EmbedDataV2 {\n    media {\n      url\n      proxyUrl\n      attachment\n      width\n      height\n      isInternal\n      videoEmbedUrl\n      upload {\n        id\n        createdAt\n        attachment\n        userId\n        name\n        type\n        fileSize\n      }\n      mimeType\n      type\n    }\n    text {\n      imageProxyUrl\n      text\n      heading\n      imageUrl\n    }\n    metadata {\n      url\n      siteName\n      siteIcon\n      footer\n      type\n      id\n      restricted\n    }\n  }\n": types.StandardEmbedFragmentDoc,
    "\n  \n  fragment StandardMessage on Message {\n    id\n    createdAt\n    updatedAt\n    chatId\n    userId\n    content\n    type\n    emoji {\n      name\n      icon\n      id\n      chatId\n    }\n    embeds {\n      ...StandardEmbed\n    }\n    reply {\n      readReceipts {\n        id\n        userId\n        lastRead\n        legacyUserId\n      }\n      content\n      userId\n      id\n      legacyUserId\n      embeds {\n        metadata {\n          type\n        }\n        media {\n          type\n        }\n      }\n      legacyUser {\n        username\n        id\n        avatar\n      }\n      user {\n        username\n        id\n        avatar\n      }\n    }\n    legacyUser {\n      username\n      id\n      avatar\n    }\n    user {\n      username\n      id\n      avatar\n    }\n    edited\n    editedAt\n    replyId\n    legacyUserId\n    pinned\n    readReceipts {\n      id\n      userId\n      lastRead\n      legacyUserId\n    }\n  }\n": types.StandardMessageFragmentDoc,
    "\n  \n  query Messages($input: InfiniteMessagesInput!) {\n    messages(input: $input) {\n      ...StandardMessage\n    }\n  }\n": types.MessagesDocument,
    "\n  \n  \n  query PagedMessages($input: PagedMessagesInput!) {\n    messagesPaged(input: $input) {\n      items {\n        ...StandardMessage\n      }\n      pager {\n        ...Pager\n      }\n    }\n  }\n": types.PagedMessagesDocument,
    "\n  query AvailableChatPermissions {\n    availableChatPermissions {\n      id\n      description\n      name\n      createdAt\n      updatedAt\n      group\n    }\n  }\n": types.AvailableChatPermissionsDocument,
    "\n  mutation SendMessage($input: SendMessageInput!) {\n    sendMessage(input: $input) {\n      id\n    }\n  }\n": types.SendMessageDocument,
    "\n  \n  subscription EmbedResolution {\n    embedResolution {\n      associationId\n      message {\n        id\n        embeds {\n          ...StandardEmbed\n        }\n      }\n    }\n  }\n": types.EmbedResolutionDocument,
    "\n  subscription NewMessage {\n    newMessage {\n      mention\n      message {\n        id\n        createdAt\n        updatedAt\n        chatId\n        userId\n        content\n        type\n        edited\n        editedAt\n        replyId\n        legacyUserId\n        pinned\n        pending\n        error\n        reply {\n          id\n          createdAt\n          updatedAt\n          userId\n          content\n          pending\n          error\n          user {\n            username\n            id\n            createdAt\n            administrator\n            moderator\n            avatar\n            bot\n          }\n          legacyUser {\n            username\n            id\n            createdAt\n            administrator\n            moderator\n            avatar\n            bot\n          }\n          tpuUser {\n            username\n            id\n            createdAt\n            administrator\n            moderator\n            avatar\n            bot\n          }\n        }\n        tpuUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n          bot\n        }\n        legacyUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n          bot\n        }\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n          bot\n        }\n        readReceipts {\n          id\n          chatId\n          userId\n          rank\n          lastRead\n          createdAt\n          notifications\n          legacyUserId\n          hidden\n          inviteUsed\n          ranksMap\n          permissions\n        }\n      }\n      associationId\n      chat {\n        id\n        recipient {\n          id\n          username\n        }\n        type\n      }\n    }\n  }\n": types.NewMessageDocument,
    "\n  subscription TypingEvent {\n    typingEvent {\n      chatId\n      expires\n      user {\n        id\n      }\n    }\n  }\n": types.TypingEventDocument,
    "\n  subscription CancelTypingEvent {\n    cancelTypingEvent {\n      chatId\n      expires\n      user {\n        id\n      }\n    }\n  }\n": types.CancelTypingEventDocument,
    "\n  mutation ToggleUserRank($input: AddRank!) {\n    toggleUserRank(input: $input) {\n      success\n    }\n  }\n": types.ToggleUserRankDocument,
    "\n  mutation TransferGroupOwnership($input: TransferOwnershipInput!) {\n    transferGroupOwnership(input: $input) {\n      userId\n    }\n  }\n": types.TransferGroupOwnershipDocument,
    "\n  mutation UpdateChat($input: UpdateChatInput!) {\n    updateChat(input: $input) {\n      id\n    }\n  }\n": types.UpdateChatDocument,
    "\n  mutation UpdateEmoji($input: UpdateEmojiInput!) {\n    updateEmoji(input: $input) {\n      name\n    }\n  }\n": types.UpdateEmojiDocument,
    "\n  mutation UpdateChatRank($input: UpdateRank!) {\n    updateChatRank(input: $input) {\n      id\n    }\n  }\n": types.UpdateChatRankDocument,
    "\n  mutation UpdateChatRankOrder($input: UpdateRankOrder!) {\n    updateChatRankOrder(input: $input) {\n      id\n    }\n  }\n": types.UpdateChatRankOrderDocument,
    "\n  mutation AddToCollection($input: AddToCollectionInput!) {\n    addToCollection(input: $input) {\n      id\n    }\n  }\n": types.AddToCollectionDocument,
    "\n  mutation RemoveFromCollection($input: AddToCollectionInput!) {\n    removeFromCollection(input: $input)\n  }\n": types.RemoveFromCollectionDocument,
    "\n  mutation ActOnCollectionInvite($input: AcceptCollectionInviteInput!) {\n    actOnCollectionInvite(input: $input) {\n      success\n    }\n  }\n": types.ActOnCollectionInviteDocument,
    "\n  mutation UpdateCollectionUserPermissions(\n    $input: UpdateCollectionUserPermissionsInput!\n  ) {\n    updateCollectionUserPermissions(input: $input) {\n      id\n      recipientId\n      read\n      write\n      configure\n    }\n  }\n": types.UpdateCollectionUserPermissionsDocument,
    "\n  mutation AddCollectionUser($input: UpdateCollectionUserPermissionsInput!) {\n    addCollectionUser(input: $input) {\n      id\n    }\n  }\n": types.AddCollectionUserDocument,
    "\n  mutation RemoveCollectionUser($input: RemoveCollectionUserInput!) {\n    removeCollectionUser(input: $input) {\n      success\n    }\n  }\n": types.RemoveCollectionUserDocument,
    "\n  mutation CreateCollection($input: CreateCollectionInput!) {\n    createCollection(input: $input) {\n      id\n    }\n  }\n": types.CreateCollectionDocument,
    "\n  query Collection($input: CollectionInput!) {\n    collection(input: $input) {\n      id\n      name\n      image\n      userId\n      banner\n      avatar\n      shareLink\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      preview {\n        id\n        attachment {\n          attachment\n          id\n        }\n      }\n      users {\n        id\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      recipient {\n        id\n        createdAt\n        updatedAt\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n      }\n      shared\n      itemCount\n      permissionsMetadata {\n        write\n        read\n        configure\n      }\n    }\n  }\n": types.CollectionDocument,
    "\n  query UserLightCollectionsQuery {\n    collections {\n      items {\n        preview {\n          updatedAt\n        }\n        updatedAt\n        createdAt\n        avatar\n        banner\n        itemCount\n        id\n        image\n        shareLink\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n        name\n      }\n    }\n    collectionInvitesCount\n  }\n": types.UserLightCollectionsQueryDocument,
    "\n  query UserCollectionsQuery($input: UserCollectionsInput!) {\n    collections(input: $input) {\n      items {\n        id\n        name\n        image\n        userId\n        shareLink\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        preview {\n          attachment {\n            attachment\n            id\n          }\n        }\n        users {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n          identifier\n          user {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n          sender {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n        }\n        recipient {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n        }\n        shared\n        itemCount\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n": types.UserCollectionsQueryDocument,
    "\n  mutation LeaveCollection($input: LeaveCollectionInput!) {\n    leaveCollection(input: $input) {\n      success\n    }\n  }\n": types.LeaveCollectionDocument,
    "\n  subscription CollectionUpdated($input: FilterCollectionInput) {\n    collectionUpdated(input: $input) {\n      id\n      name\n      banner\n      avatar\n      shareLink\n      userId\n      itemCount\n    }\n  }\n": types.CollectionUpdatedDocument,
    "\n  subscription CollectionUserAdded($input: FilterCollectionInput) {\n    collectionUserAdded(input: $input) {\n      id\n    }\n  }\n": types.CollectionUserAddedDocument,
    "\n  subscription CollectionUserRemoved($input: FilterCollectionInput) {\n    collectionUserRemoved(input: $input) {\n      id\n    }\n  }\n": types.CollectionUserRemovedDocument,
    "\n  subscription CollectionUserUpdated($input: FilterCollectionInput) {\n    collectionUserUpdated(input: $input) {\n      id\n    }\n  }\n": types.CollectionUserUpdatedDocument,
    "\n  subscription CollectionCreated {\n    collectionCreated {\n      id\n      name\n      banner\n      avatar\n      shareLink\n      userId\n      itemCount\n      new\n      permissionsMetadata {\n        read\n        write\n        configure\n      }\n    }\n  }\n": types.CollectionCreatedDocument,
    "\n  subscription CollectionRemoved($input: FilterCollectionInput) {\n    collectionRemoved(input: $input)\n  }\n": types.CollectionRemovedDocument,
    "\n  mutation TransferCollectionOwnership(\n    $input: TransferCollectionOwnershipInput!\n  ) {\n    transferCollectionOwnership(input: $input) {\n      success\n    }\n  }\n": types.TransferCollectionOwnershipDocument,
    "\n  mutation UpdateCollection($input: UpdateCollectionInput!) {\n    updateCollection(input: $input) {\n      shareLink\n      name\n      id\n    }\n  }\n": types.UpdateCollectionDocument,
    "\n  query GetExperiments {\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n  }\n": types.GetExperimentsDocument,
    "\n  mutation SetExperiment($input: SetExperimentInput!) {\n    setExperiment(input: $input) {\n      value\n      key\n    }\n  }\n": types.SetExperimentDocument,
    "\n  query CoreStateQuery {\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n    coreState {\n      connection {\n        ip\n      }\n      name\n      release\n      hostname\n      hostnameWithProtocol\n      announcements {\n        userId\n        content\n        type\n        id\n        createdAt\n        updatedAt\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      stats {\n        users\n        announcements\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        invites\n        inviteMilestone\n        pulse\n        pulses\n        docs\n        messages\n        chats\n        hours\n      }\n      maintenance {\n        enabled\n        message\n        statusPage\n      }\n      registrations\n      officialInstance\n      providers {\n        anilist\n        lastfm\n        mal\n      }\n      termsNoteId\n      privacyNoteId\n      features {\n        communications\n        collections\n        autoCollects\n        workspaces\n        insights\n      }\n      inviteAFriend\n      preTrustedDomains\n      hostnames\n      _redis\n      server\n      finishedSetup\n      domain\n      uptime\n      uptimeSys\n      commitVersion\n    }\n  }\n": types.CoreStateQueryDocument,
    "\n  query Weather {\n    weather {\n      temp\n      feels_like\n      temp_min\n      temp_max\n      pressure\n      humidity\n      wind_speed\n      wind_deg\n      clouds\n      visibility\n      error\n      cached\n      icon\n      main\n      description\n      name\n      location\n    }\n  }\n": types.WeatherDocument,
    "\n  query OauthAppConsent($input: MyAppInput!) {\n    availableChatPermissions {\n      id\n      description\n      name\n      createdAt\n      updatedAt\n      group\n    }\n    oauthAppConsent(input: $input) {\n      id\n      name\n      icon\n      shortCode\n      verified\n      redirectUri\n      description\n      scopes\n      userId\n      botId\n      private\n      bot {\n        username\n        id\n        createdAt\n        avatar\n        bot\n      }\n      token\n    }\n  }\n": types.OauthAppConsentDocument,
    "\n  mutation AddBotToChat($input: AddBotToChatInput!) {\n    addBotToChat(input: $input) {\n      id\n    }\n  }\n": types.AddBotToChatDocument,
    "\n  mutation OauthAppAuthorize($input: AuthorizeAppInput!) {\n    oauthAppAuthorize(input: $input) {\n      token\n    }\n  }\n": types.OauthAppAuthorizeDocument,
    "\n  mutation OauthAppDeauthorize($input: MyAppInput!) {\n    oauthAppDeauthorize(input: $input) {\n      success\n    }\n  }\n": types.OauthAppDeauthorizeDocument,
    "\n  mutation CreateOauthApp($input: CreateAppInput!) {\n    createOauthApp(input: $input) {\n      id\n    }\n  }\n": types.CreateOauthAppDocument,
    "\n  mutation CreateBotOauthApp($input: CreateBotInput!) {\n    createBotOauthApp(input: $input) {\n      id\n    }\n  }\n": types.CreateBotOauthAppDocument,
    "\n  query LookupBotPrefix($input: LookupPrefixInput!) {\n    lookupBotPrefix(input: $input) {\n      prefix\n      commands {\n        command\n        description\n        botId\n      }\n    }\n  }\n": types.LookupBotPrefixDocument,
    "\n  query DevApps {\n    oauthApps {\n      id\n      name\n      icon\n      shortCode\n      verified\n      redirectUri\n      secret\n      description\n      scopes\n      userId\n      private\n      user {\n        username\n      }\n    }\n  }\n": types.DevAppsDocument,
    "\n  query DevApp($input: MyAppInput!) {\n    oauthApp(input: $input) {\n      id\n      name\n      icon\n      shortCode\n      verified\n      redirectUri\n      secret\n      description\n      scopes\n      userId\n      private\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        bot\n      }\n      oauthUsers {\n        id\n        userId\n        oauthAppId\n        manage\n        active\n        createdAt\n        user {\n          username\n          id\n        }\n      }\n      bot {\n        username\n        id\n        createdAt\n        avatar\n        bot\n      }\n    }\n  }\n": types.DevAppDocument,
    "\n  mutation AddOauthUser($input: AddAppUserInput!) {\n    addOauthUser(input: $input) {\n      id\n    }\n  }\n": types.AddOauthUserDocument,
    "\n  mutation UpdateOauthApp($input: UpdateAppInput!) {\n    updateOauthApp(input: $input) {\n      success\n    }\n  }\n": types.UpdateOauthAppDocument,
    "\n  mutation DeleteOauthApp($input: MyAppInput!) {\n    deleteOauthApp(input: $input) {\n      success\n    }\n  }\n": types.DeleteOauthAppDocument,
    "\n  mutation ResetOauthSecret($input: MyAppInput!) {\n    resetOauthSecret(input: $input) {\n      success\n    }\n  }\n": types.ResetOauthSecretDocument,
    "\n  mutation UpdateOauthUser($input: UpdateAppUserInput!) {\n    updateOauthUser(input: $input) {\n      id\n    }\n  }\n": types.UpdateOauthUserDocument,
    "\n  query Domains {\n    domains {\n      domain\n      id\n      userId\n      user {\n        username\n        id\n        avatar\n      }\n    }\n  }\n": types.DomainsDocument,
    "\n  fragment Pager on Pager {\n    totalItems\n    currentPage\n    pageSize\n    totalPages\n    startPage\n    endPage\n    startIndex\n    endIndex\n    pages\n  }\n": types.PagerFragmentDoc,
    "\n  mutation AddFriend($input: AddFriendInput!) {\n    friend(input: $input)\n  }\n": types.AddFriendDocument,
    "\n  query Gallery($input: GalleryInput!) {\n    gallery(input: $input) {\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n      }\n      items {\n        autoCollectApproval {\n          id\n          autoCollectRule {\n            name\n          }\n          autoCollectRuleId\n        }\n        id\n        createdAt\n        updatedAt\n        attachment\n        userId\n        name\n        originalFilename\n        type\n        fileSize\n        deletable\n        textMetadata\n        user {\n          username\n          id\n          avatar\n        }\n        collections {\n          id\n          name\n        }\n        item {\n          id\n          pinned\n          createdAt\n        }\n        starred {\n          createdAt\n          id\n          userId\n          attachmentId\n        }\n      }\n    }\n  }\n": types.GalleryDocument,
    "\n  mutation DeleteUploads($input: DeleteUploadInput!) {\n    deleteUploads(input: $input) {\n      success\n    }\n  }\n": types.DeleteUploadsDocument,
    "\n  mutation UpdateUpload($input: UpdateUploadInput!) {\n    updateUpload(input: $input) {\n      id\n    }\n  }\n": types.UpdateUploadDocument,
    "\n  subscription CreateUploads {\n    createUpload {\n      upload {\n        id\n        createdAt\n        updatedAt\n        attachment\n        userId\n        name\n        originalFilename\n        type\n        fileSize\n        deletable\n        textMetadata\n        user {\n          username\n          id\n        }\n        item {\n          id\n        }\n        collections {\n          name\n          id\n        }\n        starred {\n          id\n        }\n      }\n    }\n  }\n": types.CreateUploadsDocument,
    "\n  query MailStateQuery {\n    unreadMail\n    mailboxes {\n      path\n      name\n      delimiter\n      flags\n      specialUse\n      listed\n      subscribed\n    }\n  }\n": types.MailStateQueryDocument,
    "\n  mutation CreatePulse($input: PulseInput!) {\n    createPulse(input: $input)\n  }\n": types.CreatePulseDocument,
    "\n  mutation CreateSinglePulse($input: SinglePulseInput!) {\n    createSinglePulse(input: $input)\n  }\n": types.CreateSinglePulseDocument,
    "\n  mutation UpdatePulse($input: PulseUpdateInput!) {\n    updatePulse(input: $input)\n  }\n": types.UpdatePulseDocument,
    "\n  mutation BlockUser($input: BlockUserInput!) {\n    blockUser(input: $input) {\n      success\n    }\n  }\n": types.BlockUserDocument,
    "\n  mutation ChangeUsername($input: ChangeUsernameInput!) {\n    changeUsername(input: $input)\n  }\n": types.ChangeUsernameDocument,
    "\n  mutation ChangeUserPassword($input: ChangePasswordInput!) {\n    changeUserPassword(input: $input)\n  }\n": types.ChangeUserPasswordDocument,
    "\n  mutation ChangeUserEmail($input: ChangeEmailInput!) {\n    changeUserEmail(input: $input)\n  }\n": types.ChangeUserEmailDocument,
    "\n  query Users {\n    Troplo: user(input: { username: \"Troplo\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    goose: user(input: { username: \"goose\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    bytedefined: user(input: { username: \"bytedefined\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    electrics01: user(input: { username: \"electrics01\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    Jolt707: user(input: { username: \"Jolt707\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    Avinera: user(input: { username: \"Avinera\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    Spy: user(input: { username: \"Spy\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n  }\n": types.UsersDocument,
    "\n  query Friends {\n    friends {\n      id\n      status\n      userId\n      friendId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        status\n      }\n    }\n  }\n": types.FriendsDocument,
    "\n  query User($input: UserProfileInput!) {\n    user(input: $input) {\n      username\n      id\n      createdAt\n      administrator\n      moderator\n      avatar\n      bot\n      badges {\n        id\n        name\n        description\n        tooltip\n        image\n        icon\n        color\n        unlocked\n        priority\n      }\n      banned\n      banner\n      description\n      friend\n      friends {\n        id\n        status\n        userId\n        friendId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        otherUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      insights\n      plan {\n        id\n        name\n        quotaMax\n        price\n        features\n        color\n        internalName\n        purchasable\n        internalFeatures\n        icon\n      }\n      platforms {\n        platform\n        id\n        lastSeen\n        status\n      }\n      profileLayout {\n        layout {\n          columns {\n            rows {\n              name\n              id\n              props {\n                height\n                friendsOnly\n                display\n                type\n                links {\n                  name\n                  url\n                  color\n                }\n                children {\n                  name\n                  id\n                  props {\n                    height\n                    friendsOnly\n                    display\n                    type\n                    links {\n                      name\n                      url\n                      color\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        config {\n          containerMargin\n          showStatsSidebar\n        }\n        version\n      }\n      publicProfile\n      quota\n      stats {\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        pulse\n        pulses\n        docs\n      }\n      xp\n    }\n  }\n": types.UserDocument,
    "\n  query Sessions($input: SessionInput) {\n    currentUser {\n      sessions(input: $input) {\n        id\n        type\n        createdAt\n        updatedAt\n        scopes\n        token\n        info {\n          accessedFrom {\n            ip\n            userAgent\n            isp\n            location\n            date\n            asn\n          }\n        }\n        name\n      }\n    }\n  }\n": types.SessionsDocument,
    "\n  subscription UserStatus {\n    userStatus {\n      id\n      status\n      platforms {\n        platform\n        id\n        lastSeen\n        status\n      }\n    }\n  }\n": types.UserStatusDocument,
    "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input)\n  }\n": types.UpdateUserDocument,
    "\n  mutation UpdateStatus($input: UpdateUserStatusInput!) {\n    updateStatus(input: $input)\n  }\n": types.UpdateStatusDocument,
    "\n  query GetUserQuery {\n    currentUser {\n      username\n      email\n      pulse\n      groupPrivacy\n      friendRequests\n      profileLayout\n      description\n      administrator\n      darkTheme\n      emailVerified\n      banned\n      createdAt\n      inviteId\n      discordPrecache\n      avatar\n      domainId\n      totpEnable\n      quota\n      moderator\n      subscriptionId\n      itemsPerPage\n      banner\n      pendingAutoCollects\n      scopes\n      alternatePasswords {\n        scopes\n        totp\n        name\n      }\n      status\n      storedStatus\n      weatherUnit\n      themeEngine\n      xp\n      publicProfile\n      privacyPolicyAccepted\n      plan {\n        quotaMax\n        color\n        internalName\n        name\n        icon\n        id\n      }\n      domain {\n        active\n        domain\n        id\n      }\n      badges {\n        color\n        icon\n        id\n        image\n        name\n        priority\n        tooltip\n      }\n      excludedCollections\n      id\n      language\n      nameColor\n      subscription {\n        metadata {\n          hours\n        }\n        cancelled\n      }\n      insights\n      notifications {\n        id\n        dismissed\n        message\n        route\n        createdAt\n      }\n      integrations {\n        type\n        providerUsername\n        providerUserId\n        id\n        error\n        expiresAt\n      }\n      homeWidgets {\n        rows {\n          widgets {\n            type\n            props\n          }\n        }\n        default\n      }\n    }\n    trackedUsers {\n      username\n      id\n      createdAt\n      administrator\n      moderator\n      avatar\n      blocked\n      status\n      nameColor\n      bot\n      nickname {\n        nickname\n      }\n    }\n    blockedUsers {\n      id\n      userId\n      createdAt\n      updatedAt\n      blockedUserId\n      silent\n    }\n  }\n": types.GetUserQueryDocument,
    "\n  mutation VerifyEmail($token: String!) {\n    verifyEmail(token: $token)\n  }\n": types.VerifyEmailDocument,
    "\n  mutation SendVerificationEmail {\n    resendVerificationEmail\n  }\n": types.SendVerificationEmailDocument,
    "\n  mutation CreateWorkspaceFolder($input: CreateWorkspaceFolderInput!) {\n    createWorkspaceFolder(input: $input) {\n      id\n      name\n    }\n  }\n": types.CreateWorkspaceFolderDocument,
    "\n  mutation CreateNote($input: CreateNoteInput!) {\n    createNote(input: $input) {\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n      }\n      permissions {\n        modify\n        read\n        configure\n      }\n    }\n  }\n": types.CreateNoteDocument,
    "\n  mutation CreateWorkspace($input: String!) {\n    createWorkspace(input: $input) {\n      id\n      name\n      userId\n      createdAt\n      updatedAt\n      icon\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      folders {\n        id\n        createdAt\n        updatedAt\n        name\n        workspaceId\n        folderId\n        children {\n          id\n          createdAt\n          updatedAt\n          name\n          data {\n            version\n            blocks\n            time\n          }\n          metadata {\n            version\n          }\n          workspaceFolderId\n          shareLink\n          versions {\n            id\n            noteId\n            userId\n          }\n          permissions {\n            modify\n            read\n            configure\n          }\n        }\n        workspace {\n          id\n          name\n          userId\n          createdAt\n          updatedAt\n          icon\n        }\n      }\n      users {\n        id\n        createdAt\n        updatedAt\n        workspaceId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n    }\n  }\n": types.CreateWorkspaceDocument,
    "\n  query Note($input: NoteInput!) {\n    note(input: $input) {\n      permissions {\n        modify\n        read\n        configure\n      }\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n        data {\n          version\n          blocks\n          time\n        }\n      }\n    }\n  }\n": types.NoteDocument,
    "\n  mutation SaveNote($input: SaveNoteInput!) {\n    saveNote(input: $input) {\n      id\n      name\n      workspaceFolderId\n    }\n  }\n": types.SaveNoteDocument,
    "\n  mutation ToggleNoteShare($input: Int!) {\n    toggleNoteShare(input: $input) {\n      shareLink\n    }\n  }\n": types.ToggleNoteShareDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdminClearCache($input: ClearCacheInput!) {\n    adminClearCache(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation AdminClearCache($input: ClearCacheInput!) {\n    adminClearCache(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Register($input: RegisterInput!) {\n    register(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Register($input: RegisterInput!) {\n    register(input: $input) {\n      token\n      user {\n        id\n        username\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ActOnAutoCollects($input: ActOnAutoCollectsInput!) {\n    actOnAutoCollects(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation ActOnAutoCollects($input: ActOnAutoCollectsInput!) {\n    actOnAutoCollects(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AutoCollects($input: UserCollectionsInput!) {\n    autoCollects(input: $input) {\n      items {\n        name\n        id\n        image\n        preview {\n          attachment {\n            attachment\n          }\n        }\n        shareLink\n        userId\n        users {\n          id\n          user {\n            username\n            id\n          }\n        }\n        itemCount\n        autoCollectApprovals {\n          attachment {\n            attachment\n            id\n            name\n            originalFilename\n            type\n            userId\n            createdAt\n            fileSize\n            textMetadata\n            collections {\n              name\n              id\n            }\n            starred {\n              id\n            }\n          }\n          id\n          autoCollectRuleId\n          autoCollectRule {\n            name\n          }\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n"): (typeof documents)["\n  query AutoCollects($input: UserCollectionsInput!) {\n    autoCollects(input: $input) {\n      items {\n        name\n        id\n        image\n        preview {\n          attachment {\n            attachment\n          }\n        }\n        shareLink\n        userId\n        users {\n          id\n          user {\n            username\n            id\n          }\n        }\n        itemCount\n        autoCollectApprovals {\n          attachment {\n            attachment\n            id\n            name\n            originalFilename\n            type\n            userId\n            createdAt\n            fileSize\n            textMetadata\n            collections {\n              name\n              id\n            }\n            starred {\n              id\n            }\n          }\n          id\n          autoCollectRuleId\n          autoCollectRule {\n            name\n          }\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AutoCollectRules {\n    autoCollectRules {\n      id\n      name\n      enabled\n      collectionId\n    }\n  }\n"): (typeof documents)["\n  query AutoCollectRules {\n    autoCollectRules {\n      id\n      name\n      enabled\n      collectionId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AutoCollectRule($input: AutoCollectRuleQueryInput!) {\n    autoCollectRule(input: $input) {\n      id\n      name\n      enabled\n      collectionId\n      requireApproval\n      rules {\n        id\n        rules {\n          id\n          type\n          value\n          operator\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AutoCollectRule($input: AutoCollectRuleQueryInput!) {\n    autoCollectRule(input: $input) {\n      id\n      name\n      enabled\n      collectionId\n      requireApproval\n      rules {\n        id\n        rules {\n          id\n          type\n          value\n          operator\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddChatUsers($input: AddChatUser!) {\n    addChatUsers(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation AddChatUsers($input: AddChatUser!) {\n    addChatUsers(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ChatAuditLog($input: AuditLogInput!) {\n    chatAuditLog(input: $input) {\n      items {\n        id\n        userId\n        chatId\n        category\n        actionType\n        message\n        createdAt\n        updatedAt\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n"): (typeof documents)["\n  query ChatAuditLog($input: AuditLogInput!) {\n    chatAuditLog(input: $input) {\n      items {\n        id\n        userId\n        chatId\n        category\n        actionType\n        message\n        createdAt\n        updatedAt\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ChatsQuery {\n    userEmoji {\n      id\n      userId\n      chatId\n      icon\n      name\n      createdAt\n      updatedAt\n    }\n    chats {\n      id\n      description\n      type\n      background\n      unread\n      name\n      userId\n      icon\n      createdAt\n      updatedAt\n      legacyUserId\n      invites {\n        id\n        userId\n        createdAt\n        rankId\n        updatedAt\n        expiredAt\n        invalidated\n      }\n      association {\n        id\n        hidden\n        chatId\n        permissions\n        userId\n        rank\n        createdAt\n        lastRead\n        notifications\n        legacyUserId\n      }\n      users {\n        id\n        chatId\n        userId\n        rank\n        createdAt\n        lastRead\n        legacyUserId\n        ranksMap\n      }\n      _redisSortDate\n      recipient {\n        id\n      }\n      ranks {\n        id\n        color\n        name\n        userId\n        createdAt\n        chatId\n        updatedAt\n        managed\n        index\n        permissionsMap\n      }\n    }\n  }\n"): (typeof documents)["\n  query ChatsQuery {\n    userEmoji {\n      id\n      userId\n      chatId\n      icon\n      name\n      createdAt\n      updatedAt\n    }\n    chats {\n      id\n      description\n      type\n      background\n      unread\n      name\n      userId\n      icon\n      createdAt\n      updatedAt\n      legacyUserId\n      invites {\n        id\n        userId\n        createdAt\n        rankId\n        updatedAt\n        expiredAt\n        invalidated\n      }\n      association {\n        id\n        hidden\n        chatId\n        permissions\n        userId\n        rank\n        createdAt\n        lastRead\n        notifications\n        legacyUserId\n      }\n      users {\n        id\n        chatId\n        userId\n        rank\n        createdAt\n        lastRead\n        legacyUserId\n        ranksMap\n      }\n      _redisSortDate\n      recipient {\n        id\n      }\n      ranks {\n        id\n        color\n        name\n        userId\n        createdAt\n        chatId\n        updatedAt\n        managed\n        index\n        permissionsMap\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateChat($input: CreateChatInput!) {\n    createChat(input: $input) {\n      id\n      association {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateChat($input: CreateChatInput!) {\n    createChat(input: $input) {\n      id\n      association {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddChatRank($input: CreateRank!) {\n    addChatRank(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddChatRank($input: CreateRank!) {\n    addChatRank(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteEmoji($input: DeleteEmojiInput!) {\n    deleteEmoji(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteEmoji($input: DeleteEmojiInput!) {\n    deleteEmoji(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteGroup($input: DangerZoneChatInput!) {\n    deleteGroup(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteGroup($input: DangerZoneChatInput!) {\n    deleteGroup(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LeaveChat($input: LeaveChatInput!) {\n    leaveChat(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation LeaveChat($input: LeaveChatInput!) {\n    leaveChat(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InvalidateChatInvite($input: InvalidateInviteInput!) {\n    invalidateChatInvite(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation InvalidateChatInvite($input: InvalidateInviteInput!) {\n    invalidateChatInvite(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteChatRank($input: DeleteRank!) {\n    deleteChatRank(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteChatRank($input: DeleteRank!) {\n    deleteChatRank(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ChatInvite($input: InviteInput!) {\n    chatInvite(input: $input) {\n      id\n      userId\n      chatId\n      rankId\n      createdAt\n      updatedAt\n      expiredAt\n      invalidated\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      chat {\n        id\n        name\n        users {\n          id\n        }\n        description\n        background\n        icon\n        type\n      }\n      rank {\n        id\n        color\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query ChatInvite($input: InviteInput!) {\n    chatInvite(input: $input) {\n      id\n      userId\n      chatId\n      rankId\n      createdAt\n      updatedAt\n      expiredAt\n      invalidated\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      chat {\n        id\n        name\n        users {\n          id\n        }\n        description\n        background\n        icon\n        type\n      }\n      rank {\n        id\n        color\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetInvitesForChat($input: ChatInput!) {\n    chat(input: $input) {\n      invites {\n        id\n        userId\n        createdAt\n        rankId\n        updatedAt\n        expiredAt\n        invalidated\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetInvitesForChat($input: ChatInput!) {\n    chat(input: $input) {\n      invites {\n        id\n        userId\n        createdAt\n        rankId\n        updatedAt\n        expiredAt\n        invalidated\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation JoinChatFromInvite($input: JoinChatFromInviteInput!) {\n    joinChatFromInvite(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation JoinChatFromInvite($input: JoinChatFromInviteInput!) {\n    joinChatFromInvite(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateChatInvite($input: CreateInviteInput!) {\n    createChatInvite(input: $input) {\n      id\n      userId\n      chatId\n      rankId\n      createdAt\n      updatedAt\n      expiredAt\n      invalidated\n    }\n  }\n"): (typeof documents)["\n  mutation CreateChatInvite($input: CreateInviteInput!) {\n    createChatInvite(input: $input) {\n      id\n      userId\n      chatId\n      rankId\n      createdAt\n      updatedAt\n      expiredAt\n      invalidated\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment StandardEmbed on EmbedDataV2 {\n    media {\n      url\n      proxyUrl\n      attachment\n      width\n      height\n      isInternal\n      videoEmbedUrl\n      upload {\n        id\n        createdAt\n        attachment\n        userId\n        name\n        type\n        fileSize\n      }\n      mimeType\n      type\n    }\n    text {\n      imageProxyUrl\n      text\n      heading\n      imageUrl\n    }\n    metadata {\n      url\n      siteName\n      siteIcon\n      footer\n      type\n      id\n      restricted\n    }\n  }\n"): (typeof documents)["\n  fragment StandardEmbed on EmbedDataV2 {\n    media {\n      url\n      proxyUrl\n      attachment\n      width\n      height\n      isInternal\n      videoEmbedUrl\n      upload {\n        id\n        createdAt\n        attachment\n        userId\n        name\n        type\n        fileSize\n      }\n      mimeType\n      type\n    }\n    text {\n      imageProxyUrl\n      text\n      heading\n      imageUrl\n    }\n    metadata {\n      url\n      siteName\n      siteIcon\n      footer\n      type\n      id\n      restricted\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  fragment StandardMessage on Message {\n    id\n    createdAt\n    updatedAt\n    chatId\n    userId\n    content\n    type\n    emoji {\n      name\n      icon\n      id\n      chatId\n    }\n    embeds {\n      ...StandardEmbed\n    }\n    reply {\n      readReceipts {\n        id\n        userId\n        lastRead\n        legacyUserId\n      }\n      content\n      userId\n      id\n      legacyUserId\n      embeds {\n        metadata {\n          type\n        }\n        media {\n          type\n        }\n      }\n      legacyUser {\n        username\n        id\n        avatar\n      }\n      user {\n        username\n        id\n        avatar\n      }\n    }\n    legacyUser {\n      username\n      id\n      avatar\n    }\n    user {\n      username\n      id\n      avatar\n    }\n    edited\n    editedAt\n    replyId\n    legacyUserId\n    pinned\n    readReceipts {\n      id\n      userId\n      lastRead\n      legacyUserId\n    }\n  }\n"): (typeof documents)["\n  \n  fragment StandardMessage on Message {\n    id\n    createdAt\n    updatedAt\n    chatId\n    userId\n    content\n    type\n    emoji {\n      name\n      icon\n      id\n      chatId\n    }\n    embeds {\n      ...StandardEmbed\n    }\n    reply {\n      readReceipts {\n        id\n        userId\n        lastRead\n        legacyUserId\n      }\n      content\n      userId\n      id\n      legacyUserId\n      embeds {\n        metadata {\n          type\n        }\n        media {\n          type\n        }\n      }\n      legacyUser {\n        username\n        id\n        avatar\n      }\n      user {\n        username\n        id\n        avatar\n      }\n    }\n    legacyUser {\n      username\n      id\n      avatar\n    }\n    user {\n      username\n      id\n      avatar\n    }\n    edited\n    editedAt\n    replyId\n    legacyUserId\n    pinned\n    readReceipts {\n      id\n      userId\n      lastRead\n      legacyUserId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  query Messages($input: InfiniteMessagesInput!) {\n    messages(input: $input) {\n      ...StandardMessage\n    }\n  }\n"): (typeof documents)["\n  \n  query Messages($input: InfiniteMessagesInput!) {\n    messages(input: $input) {\n      ...StandardMessage\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  \n  query PagedMessages($input: PagedMessagesInput!) {\n    messagesPaged(input: $input) {\n      items {\n        ...StandardMessage\n      }\n      pager {\n        ...Pager\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query PagedMessages($input: PagedMessagesInput!) {\n    messagesPaged(input: $input) {\n      items {\n        ...StandardMessage\n      }\n      pager {\n        ...Pager\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AvailableChatPermissions {\n    availableChatPermissions {\n      id\n      description\n      name\n      createdAt\n      updatedAt\n      group\n    }\n  }\n"): (typeof documents)["\n  query AvailableChatPermissions {\n    availableChatPermissions {\n      id\n      description\n      name\n      createdAt\n      updatedAt\n      group\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendMessage($input: SendMessageInput!) {\n    sendMessage(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation SendMessage($input: SendMessageInput!) {\n    sendMessage(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  \n  subscription EmbedResolution {\n    embedResolution {\n      associationId\n      message {\n        id\n        embeds {\n          ...StandardEmbed\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  subscription EmbedResolution {\n    embedResolution {\n      associationId\n      message {\n        id\n        embeds {\n          ...StandardEmbed\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription NewMessage {\n    newMessage {\n      mention\n      message {\n        id\n        createdAt\n        updatedAt\n        chatId\n        userId\n        content\n        type\n        edited\n        editedAt\n        replyId\n        legacyUserId\n        pinned\n        pending\n        error\n        reply {\n          id\n          createdAt\n          updatedAt\n          userId\n          content\n          pending\n          error\n          user {\n            username\n            id\n            createdAt\n            administrator\n            moderator\n            avatar\n            bot\n          }\n          legacyUser {\n            username\n            id\n            createdAt\n            administrator\n            moderator\n            avatar\n            bot\n          }\n          tpuUser {\n            username\n            id\n            createdAt\n            administrator\n            moderator\n            avatar\n            bot\n          }\n        }\n        tpuUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n          bot\n        }\n        legacyUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n          bot\n        }\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n          bot\n        }\n        readReceipts {\n          id\n          chatId\n          userId\n          rank\n          lastRead\n          createdAt\n          notifications\n          legacyUserId\n          hidden\n          inviteUsed\n          ranksMap\n          permissions\n        }\n      }\n      associationId\n      chat {\n        id\n        recipient {\n          id\n          username\n        }\n        type\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription NewMessage {\n    newMessage {\n      mention\n      message {\n        id\n        createdAt\n        updatedAt\n        chatId\n        userId\n        content\n        type\n        edited\n        editedAt\n        replyId\n        legacyUserId\n        pinned\n        pending\n        error\n        reply {\n          id\n          createdAt\n          updatedAt\n          userId\n          content\n          pending\n          error\n          user {\n            username\n            id\n            createdAt\n            administrator\n            moderator\n            avatar\n            bot\n          }\n          legacyUser {\n            username\n            id\n            createdAt\n            administrator\n            moderator\n            avatar\n            bot\n          }\n          tpuUser {\n            username\n            id\n            createdAt\n            administrator\n            moderator\n            avatar\n            bot\n          }\n        }\n        tpuUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n          bot\n        }\n        legacyUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n          bot\n        }\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n          bot\n        }\n        readReceipts {\n          id\n          chatId\n          userId\n          rank\n          lastRead\n          createdAt\n          notifications\n          legacyUserId\n          hidden\n          inviteUsed\n          ranksMap\n          permissions\n        }\n      }\n      associationId\n      chat {\n        id\n        recipient {\n          id\n          username\n        }\n        type\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription TypingEvent {\n    typingEvent {\n      chatId\n      expires\n      user {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription TypingEvent {\n    typingEvent {\n      chatId\n      expires\n      user {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CancelTypingEvent {\n    cancelTypingEvent {\n      chatId\n      expires\n      user {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription CancelTypingEvent {\n    cancelTypingEvent {\n      chatId\n      expires\n      user {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ToggleUserRank($input: AddRank!) {\n    toggleUserRank(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation ToggleUserRank($input: AddRank!) {\n    toggleUserRank(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TransferGroupOwnership($input: TransferOwnershipInput!) {\n    transferGroupOwnership(input: $input) {\n      userId\n    }\n  }\n"): (typeof documents)["\n  mutation TransferGroupOwnership($input: TransferOwnershipInput!) {\n    transferGroupOwnership(input: $input) {\n      userId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateChat($input: UpdateChatInput!) {\n    updateChat(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateChat($input: UpdateChatInput!) {\n    updateChat(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateEmoji($input: UpdateEmojiInput!) {\n    updateEmoji(input: $input) {\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateEmoji($input: UpdateEmojiInput!) {\n    updateEmoji(input: $input) {\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateChatRank($input: UpdateRank!) {\n    updateChatRank(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateChatRank($input: UpdateRank!) {\n    updateChatRank(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateChatRankOrder($input: UpdateRankOrder!) {\n    updateChatRankOrder(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateChatRankOrder($input: UpdateRankOrder!) {\n    updateChatRankOrder(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddToCollection($input: AddToCollectionInput!) {\n    addToCollection(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddToCollection($input: AddToCollectionInput!) {\n    addToCollection(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveFromCollection($input: AddToCollectionInput!) {\n    removeFromCollection(input: $input)\n  }\n"): (typeof documents)["\n  mutation RemoveFromCollection($input: AddToCollectionInput!) {\n    removeFromCollection(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ActOnCollectionInvite($input: AcceptCollectionInviteInput!) {\n    actOnCollectionInvite(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation ActOnCollectionInvite($input: AcceptCollectionInviteInput!) {\n    actOnCollectionInvite(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCollectionUserPermissions(\n    $input: UpdateCollectionUserPermissionsInput!\n  ) {\n    updateCollectionUserPermissions(input: $input) {\n      id\n      recipientId\n      read\n      write\n      configure\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCollectionUserPermissions(\n    $input: UpdateCollectionUserPermissionsInput!\n  ) {\n    updateCollectionUserPermissions(input: $input) {\n      id\n      recipientId\n      read\n      write\n      configure\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddCollectionUser($input: UpdateCollectionUserPermissionsInput!) {\n    addCollectionUser(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddCollectionUser($input: UpdateCollectionUserPermissionsInput!) {\n    addCollectionUser(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveCollectionUser($input: RemoveCollectionUserInput!) {\n    removeCollectionUser(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveCollectionUser($input: RemoveCollectionUserInput!) {\n    removeCollectionUser(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCollection($input: CreateCollectionInput!) {\n    createCollection(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCollection($input: CreateCollectionInput!) {\n    createCollection(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Collection($input: CollectionInput!) {\n    collection(input: $input) {\n      id\n      name\n      image\n      userId\n      banner\n      avatar\n      shareLink\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      preview {\n        id\n        attachment {\n          attachment\n          id\n        }\n      }\n      users {\n        id\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      recipient {\n        id\n        createdAt\n        updatedAt\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n      }\n      shared\n      itemCount\n      permissionsMetadata {\n        write\n        read\n        configure\n      }\n    }\n  }\n"): (typeof documents)["\n  query Collection($input: CollectionInput!) {\n    collection(input: $input) {\n      id\n      name\n      image\n      userId\n      banner\n      avatar\n      shareLink\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      preview {\n        id\n        attachment {\n          attachment\n          id\n        }\n      }\n      users {\n        id\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      recipient {\n        id\n        createdAt\n        updatedAt\n        collectionId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n      }\n      shared\n      itemCount\n      permissionsMetadata {\n        write\n        read\n        configure\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserLightCollectionsQuery {\n    collections {\n      items {\n        preview {\n          updatedAt\n        }\n        updatedAt\n        createdAt\n        avatar\n        banner\n        itemCount\n        id\n        image\n        shareLink\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n        name\n      }\n    }\n    collectionInvitesCount\n  }\n"): (typeof documents)["\n  query UserLightCollectionsQuery {\n    collections {\n      items {\n        preview {\n          updatedAt\n        }\n        updatedAt\n        createdAt\n        avatar\n        banner\n        itemCount\n        id\n        image\n        shareLink\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n        name\n      }\n    }\n    collectionInvitesCount\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserCollectionsQuery($input: UserCollectionsInput!) {\n    collections(input: $input) {\n      items {\n        id\n        name\n        image\n        userId\n        shareLink\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        preview {\n          attachment {\n            attachment\n            id\n          }\n        }\n        users {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n          identifier\n          user {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n          sender {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n        }\n        recipient {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n        }\n        shared\n        itemCount\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserCollectionsQuery($input: UserCollectionsInput!) {\n    collections(input: $input) {\n      items {\n        id\n        name\n        image\n        userId\n        shareLink\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        preview {\n          attachment {\n            attachment\n            id\n          }\n        }\n        users {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n          identifier\n          user {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n          sender {\n            username\n            id\n            administrator\n            moderator\n            avatar\n          }\n        }\n        recipient {\n          id\n          createdAt\n          updatedAt\n          collectionId\n          read\n          write\n          configure\n          accepted\n          recipientId\n          senderId\n        }\n        shared\n        itemCount\n        permissionsMetadata {\n          write\n          read\n          configure\n        }\n      }\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n        pages\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LeaveCollection($input: LeaveCollectionInput!) {\n    leaveCollection(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation LeaveCollection($input: LeaveCollectionInput!) {\n    leaveCollection(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CollectionUpdated($input: FilterCollectionInput) {\n    collectionUpdated(input: $input) {\n      id\n      name\n      banner\n      avatar\n      shareLink\n      userId\n      itemCount\n    }\n  }\n"): (typeof documents)["\n  subscription CollectionUpdated($input: FilterCollectionInput) {\n    collectionUpdated(input: $input) {\n      id\n      name\n      banner\n      avatar\n      shareLink\n      userId\n      itemCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CollectionUserAdded($input: FilterCollectionInput) {\n    collectionUserAdded(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  subscription CollectionUserAdded($input: FilterCollectionInput) {\n    collectionUserAdded(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CollectionUserRemoved($input: FilterCollectionInput) {\n    collectionUserRemoved(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  subscription CollectionUserRemoved($input: FilterCollectionInput) {\n    collectionUserRemoved(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CollectionUserUpdated($input: FilterCollectionInput) {\n    collectionUserUpdated(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  subscription CollectionUserUpdated($input: FilterCollectionInput) {\n    collectionUserUpdated(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CollectionCreated {\n    collectionCreated {\n      id\n      name\n      banner\n      avatar\n      shareLink\n      userId\n      itemCount\n      new\n      permissionsMetadata {\n        read\n        write\n        configure\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription CollectionCreated {\n    collectionCreated {\n      id\n      name\n      banner\n      avatar\n      shareLink\n      userId\n      itemCount\n      new\n      permissionsMetadata {\n        read\n        write\n        configure\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CollectionRemoved($input: FilterCollectionInput) {\n    collectionRemoved(input: $input)\n  }\n"): (typeof documents)["\n  subscription CollectionRemoved($input: FilterCollectionInput) {\n    collectionRemoved(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TransferCollectionOwnership(\n    $input: TransferCollectionOwnershipInput!\n  ) {\n    transferCollectionOwnership(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation TransferCollectionOwnership(\n    $input: TransferCollectionOwnershipInput!\n  ) {\n    transferCollectionOwnership(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCollection($input: UpdateCollectionInput!) {\n    updateCollection(input: $input) {\n      shareLink\n      name\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCollection($input: UpdateCollectionInput!) {\n    updateCollection(input: $input) {\n      shareLink\n      name\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetExperiments {\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetExperiments {\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetExperiment($input: SetExperimentInput!) {\n    setExperiment(input: $input) {\n      value\n      key\n    }\n  }\n"): (typeof documents)["\n  mutation SetExperiment($input: SetExperimentInput!) {\n    setExperiment(input: $input) {\n      value\n      key\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CoreStateQuery {\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n    coreState {\n      connection {\n        ip\n      }\n      name\n      release\n      hostname\n      hostnameWithProtocol\n      announcements {\n        userId\n        content\n        type\n        id\n        createdAt\n        updatedAt\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      stats {\n        users\n        announcements\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        invites\n        inviteMilestone\n        pulse\n        pulses\n        docs\n        messages\n        chats\n        hours\n      }\n      maintenance {\n        enabled\n        message\n        statusPage\n      }\n      registrations\n      officialInstance\n      providers {\n        anilist\n        lastfm\n        mal\n      }\n      termsNoteId\n      privacyNoteId\n      features {\n        communications\n        collections\n        autoCollects\n        workspaces\n        insights\n      }\n      inviteAFriend\n      preTrustedDomains\n      hostnames\n      _redis\n      server\n      finishedSetup\n      domain\n      uptime\n      uptimeSys\n      commitVersion\n    }\n  }\n"): (typeof documents)["\n  query CoreStateQuery {\n    experiments {\n      id\n      value\n      description\n      createdAt\n    }\n    coreState {\n      connection {\n        ip\n      }\n      name\n      release\n      hostname\n      hostnameWithProtocol\n      announcements {\n        userId\n        content\n        type\n        id\n        createdAt\n        updatedAt\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      stats {\n        users\n        announcements\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        invites\n        inviteMilestone\n        pulse\n        pulses\n        docs\n        messages\n        chats\n        hours\n      }\n      maintenance {\n        enabled\n        message\n        statusPage\n      }\n      registrations\n      officialInstance\n      providers {\n        anilist\n        lastfm\n        mal\n      }\n      termsNoteId\n      privacyNoteId\n      features {\n        communications\n        collections\n        autoCollects\n        workspaces\n        insights\n      }\n      inviteAFriend\n      preTrustedDomains\n      hostnames\n      _redis\n      server\n      finishedSetup\n      domain\n      uptime\n      uptimeSys\n      commitVersion\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Weather {\n    weather {\n      temp\n      feels_like\n      temp_min\n      temp_max\n      pressure\n      humidity\n      wind_speed\n      wind_deg\n      clouds\n      visibility\n      error\n      cached\n      icon\n      main\n      description\n      name\n      location\n    }\n  }\n"): (typeof documents)["\n  query Weather {\n    weather {\n      temp\n      feels_like\n      temp_min\n      temp_max\n      pressure\n      humidity\n      wind_speed\n      wind_deg\n      clouds\n      visibility\n      error\n      cached\n      icon\n      main\n      description\n      name\n      location\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OauthAppConsent($input: MyAppInput!) {\n    availableChatPermissions {\n      id\n      description\n      name\n      createdAt\n      updatedAt\n      group\n    }\n    oauthAppConsent(input: $input) {\n      id\n      name\n      icon\n      shortCode\n      verified\n      redirectUri\n      description\n      scopes\n      userId\n      botId\n      private\n      bot {\n        username\n        id\n        createdAt\n        avatar\n        bot\n      }\n      token\n    }\n  }\n"): (typeof documents)["\n  query OauthAppConsent($input: MyAppInput!) {\n    availableChatPermissions {\n      id\n      description\n      name\n      createdAt\n      updatedAt\n      group\n    }\n    oauthAppConsent(input: $input) {\n      id\n      name\n      icon\n      shortCode\n      verified\n      redirectUri\n      description\n      scopes\n      userId\n      botId\n      private\n      bot {\n        username\n        id\n        createdAt\n        avatar\n        bot\n      }\n      token\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddBotToChat($input: AddBotToChatInput!) {\n    addBotToChat(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddBotToChat($input: AddBotToChatInput!) {\n    addBotToChat(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OauthAppAuthorize($input: AuthorizeAppInput!) {\n    oauthAppAuthorize(input: $input) {\n      token\n    }\n  }\n"): (typeof documents)["\n  mutation OauthAppAuthorize($input: AuthorizeAppInput!) {\n    oauthAppAuthorize(input: $input) {\n      token\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OauthAppDeauthorize($input: MyAppInput!) {\n    oauthAppDeauthorize(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation OauthAppDeauthorize($input: MyAppInput!) {\n    oauthAppDeauthorize(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOauthApp($input: CreateAppInput!) {\n    createOauthApp(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOauthApp($input: CreateAppInput!) {\n    createOauthApp(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateBotOauthApp($input: CreateBotInput!) {\n    createBotOauthApp(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBotOauthApp($input: CreateBotInput!) {\n    createBotOauthApp(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LookupBotPrefix($input: LookupPrefixInput!) {\n    lookupBotPrefix(input: $input) {\n      prefix\n      commands {\n        command\n        description\n        botId\n      }\n    }\n  }\n"): (typeof documents)["\n  query LookupBotPrefix($input: LookupPrefixInput!) {\n    lookupBotPrefix(input: $input) {\n      prefix\n      commands {\n        command\n        description\n        botId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DevApps {\n    oauthApps {\n      id\n      name\n      icon\n      shortCode\n      verified\n      redirectUri\n      secret\n      description\n      scopes\n      userId\n      private\n      user {\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  query DevApps {\n    oauthApps {\n      id\n      name\n      icon\n      shortCode\n      verified\n      redirectUri\n      secret\n      description\n      scopes\n      userId\n      private\n      user {\n        username\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DevApp($input: MyAppInput!) {\n    oauthApp(input: $input) {\n      id\n      name\n      icon\n      shortCode\n      verified\n      redirectUri\n      secret\n      description\n      scopes\n      userId\n      private\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        bot\n      }\n      oauthUsers {\n        id\n        userId\n        oauthAppId\n        manage\n        active\n        createdAt\n        user {\n          username\n          id\n        }\n      }\n      bot {\n        username\n        id\n        createdAt\n        avatar\n        bot\n      }\n    }\n  }\n"): (typeof documents)["\n  query DevApp($input: MyAppInput!) {\n    oauthApp(input: $input) {\n      id\n      name\n      icon\n      shortCode\n      verified\n      redirectUri\n      secret\n      description\n      scopes\n      userId\n      private\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        bot\n      }\n      oauthUsers {\n        id\n        userId\n        oauthAppId\n        manage\n        active\n        createdAt\n        user {\n          username\n          id\n        }\n      }\n      bot {\n        username\n        id\n        createdAt\n        avatar\n        bot\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddOauthUser($input: AddAppUserInput!) {\n    addOauthUser(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AddOauthUser($input: AddAppUserInput!) {\n    addOauthUser(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateOauthApp($input: UpdateAppInput!) {\n    updateOauthApp(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOauthApp($input: UpdateAppInput!) {\n    updateOauthApp(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteOauthApp($input: MyAppInput!) {\n    deleteOauthApp(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteOauthApp($input: MyAppInput!) {\n    deleteOauthApp(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResetOauthSecret($input: MyAppInput!) {\n    resetOauthSecret(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation ResetOauthSecret($input: MyAppInput!) {\n    resetOauthSecret(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateOauthUser($input: UpdateAppUserInput!) {\n    updateOauthUser(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOauthUser($input: UpdateAppUserInput!) {\n    updateOauthUser(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Domains {\n    domains {\n      domain\n      id\n      userId\n      user {\n        username\n        id\n        avatar\n      }\n    }\n  }\n"): (typeof documents)["\n  query Domains {\n    domains {\n      domain\n      id\n      userId\n      user {\n        username\n        id\n        avatar\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Pager on Pager {\n    totalItems\n    currentPage\n    pageSize\n    totalPages\n    startPage\n    endPage\n    startIndex\n    endIndex\n    pages\n  }\n"): (typeof documents)["\n  fragment Pager on Pager {\n    totalItems\n    currentPage\n    pageSize\n    totalPages\n    startPage\n    endPage\n    startIndex\n    endIndex\n    pages\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddFriend($input: AddFriendInput!) {\n    friend(input: $input)\n  }\n"): (typeof documents)["\n  mutation AddFriend($input: AddFriendInput!) {\n    friend(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Gallery($input: GalleryInput!) {\n    gallery(input: $input) {\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n      }\n      items {\n        autoCollectApproval {\n          id\n          autoCollectRule {\n            name\n          }\n          autoCollectRuleId\n        }\n        id\n        createdAt\n        updatedAt\n        attachment\n        userId\n        name\n        originalFilename\n        type\n        fileSize\n        deletable\n        textMetadata\n        user {\n          username\n          id\n          avatar\n        }\n        collections {\n          id\n          name\n        }\n        item {\n          id\n          pinned\n          createdAt\n        }\n        starred {\n          createdAt\n          id\n          userId\n          attachmentId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Gallery($input: GalleryInput!) {\n    gallery(input: $input) {\n      pager {\n        totalItems\n        currentPage\n        pageSize\n        totalPages\n        startPage\n        endPage\n        startIndex\n        endIndex\n      }\n      items {\n        autoCollectApproval {\n          id\n          autoCollectRule {\n            name\n          }\n          autoCollectRuleId\n        }\n        id\n        createdAt\n        updatedAt\n        attachment\n        userId\n        name\n        originalFilename\n        type\n        fileSize\n        deletable\n        textMetadata\n        user {\n          username\n          id\n          avatar\n        }\n        collections {\n          id\n          name\n        }\n        item {\n          id\n          pinned\n          createdAt\n        }\n        starred {\n          createdAt\n          id\n          userId\n          attachmentId\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUploads($input: DeleteUploadInput!) {\n    deleteUploads(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteUploads($input: DeleteUploadInput!) {\n    deleteUploads(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUpload($input: UpdateUploadInput!) {\n    updateUpload(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUpload($input: UpdateUploadInput!) {\n    updateUpload(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CreateUploads {\n    createUpload {\n      upload {\n        id\n        createdAt\n        updatedAt\n        attachment\n        userId\n        name\n        originalFilename\n        type\n        fileSize\n        deletable\n        textMetadata\n        user {\n          username\n          id\n        }\n        item {\n          id\n        }\n        collections {\n          name\n          id\n        }\n        starred {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription CreateUploads {\n    createUpload {\n      upload {\n        id\n        createdAt\n        updatedAt\n        attachment\n        userId\n        name\n        originalFilename\n        type\n        fileSize\n        deletable\n        textMetadata\n        user {\n          username\n          id\n        }\n        item {\n          id\n        }\n        collections {\n          name\n          id\n        }\n        starred {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MailStateQuery {\n    unreadMail\n    mailboxes {\n      path\n      name\n      delimiter\n      flags\n      specialUse\n      listed\n      subscribed\n    }\n  }\n"): (typeof documents)["\n  query MailStateQuery {\n    unreadMail\n    mailboxes {\n      path\n      name\n      delimiter\n      flags\n      specialUse\n      listed\n      subscribed\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePulse($input: PulseInput!) {\n    createPulse(input: $input)\n  }\n"): (typeof documents)["\n  mutation CreatePulse($input: PulseInput!) {\n    createPulse(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSinglePulse($input: SinglePulseInput!) {\n    createSinglePulse(input: $input)\n  }\n"): (typeof documents)["\n  mutation CreateSinglePulse($input: SinglePulseInput!) {\n    createSinglePulse(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdatePulse($input: PulseUpdateInput!) {\n    updatePulse(input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdatePulse($input: PulseUpdateInput!) {\n    updatePulse(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation BlockUser($input: BlockUserInput!) {\n    blockUser(input: $input) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation BlockUser($input: BlockUserInput!) {\n    blockUser(input: $input) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangeUsername($input: ChangeUsernameInput!) {\n    changeUsername(input: $input)\n  }\n"): (typeof documents)["\n  mutation ChangeUsername($input: ChangeUsernameInput!) {\n    changeUsername(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangeUserPassword($input: ChangePasswordInput!) {\n    changeUserPassword(input: $input)\n  }\n"): (typeof documents)["\n  mutation ChangeUserPassword($input: ChangePasswordInput!) {\n    changeUserPassword(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangeUserEmail($input: ChangeEmailInput!) {\n    changeUserEmail(input: $input)\n  }\n"): (typeof documents)["\n  mutation ChangeUserEmail($input: ChangeEmailInput!) {\n    changeUserEmail(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Users {\n    Troplo: user(input: { username: \"Troplo\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    goose: user(input: { username: \"goose\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    bytedefined: user(input: { username: \"bytedefined\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    electrics01: user(input: { username: \"electrics01\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    Jolt707: user(input: { username: \"Jolt707\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    Avinera: user(input: { username: \"Avinera\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    Spy: user(input: { username: \"Spy\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n  }\n"): (typeof documents)["\n  query Users {\n    Troplo: user(input: { username: \"Troplo\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    goose: user(input: { username: \"goose\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    bytedefined: user(input: { username: \"bytedefined\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    electrics01: user(input: { username: \"electrics01\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    Jolt707: user(input: { username: \"Jolt707\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    Avinera: user(input: { username: \"Avinera\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n    Spy: user(input: { username: \"Spy\" }) {\n      username\n      id\n      avatar\n      banner\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Friends {\n    friends {\n      id\n      status\n      userId\n      friendId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  query Friends {\n    friends {\n      id\n      status\n      userId\n      friendId\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n        status\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query User($input: UserProfileInput!) {\n    user(input: $input) {\n      username\n      id\n      createdAt\n      administrator\n      moderator\n      avatar\n      bot\n      badges {\n        id\n        name\n        description\n        tooltip\n        image\n        icon\n        color\n        unlocked\n        priority\n      }\n      banned\n      banner\n      description\n      friend\n      friends {\n        id\n        status\n        userId\n        friendId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        otherUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      insights\n      plan {\n        id\n        name\n        quotaMax\n        price\n        features\n        color\n        internalName\n        purchasable\n        internalFeatures\n        icon\n      }\n      platforms {\n        platform\n        id\n        lastSeen\n        status\n      }\n      profileLayout {\n        layout {\n          columns {\n            rows {\n              name\n              id\n              props {\n                height\n                friendsOnly\n                display\n                type\n                links {\n                  name\n                  url\n                  color\n                }\n                children {\n                  name\n                  id\n                  props {\n                    height\n                    friendsOnly\n                    display\n                    type\n                    links {\n                      name\n                      url\n                      color\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        config {\n          containerMargin\n          showStatsSidebar\n        }\n        version\n      }\n      publicProfile\n      quota\n      stats {\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        pulse\n        pulses\n        docs\n      }\n      xp\n    }\n  }\n"): (typeof documents)["\n  query User($input: UserProfileInput!) {\n    user(input: $input) {\n      username\n      id\n      createdAt\n      administrator\n      moderator\n      avatar\n      bot\n      badges {\n        id\n        name\n        description\n        tooltip\n        image\n        icon\n        color\n        unlocked\n        priority\n      }\n      banned\n      banner\n      description\n      friend\n      friends {\n        id\n        status\n        userId\n        friendId\n        user {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n        otherUser {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n      insights\n      plan {\n        id\n        name\n        quotaMax\n        price\n        features\n        color\n        internalName\n        purchasable\n        internalFeatures\n        icon\n      }\n      platforms {\n        platform\n        id\n        lastSeen\n        status\n      }\n      profileLayout {\n        layout {\n          columns {\n            rows {\n              name\n              id\n              props {\n                height\n                friendsOnly\n                display\n                type\n                links {\n                  name\n                  url\n                  color\n                }\n                children {\n                  name\n                  id\n                  props {\n                    height\n                    friendsOnly\n                    display\n                    type\n                    links {\n                      name\n                      url\n                      color\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        config {\n          containerMargin\n          showStatsSidebar\n        }\n        version\n      }\n      publicProfile\n      quota\n      stats {\n        usage\n        collections\n        collectionItems\n        uploadGraph {\n          data\n          labels\n        }\n        messageGraph {\n          data\n          labels\n        }\n        pulseGraph {\n          data\n          labels\n        }\n        uploads\n        pulse\n        pulses\n        docs\n      }\n      xp\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Sessions($input: SessionInput) {\n    currentUser {\n      sessions(input: $input) {\n        id\n        type\n        createdAt\n        updatedAt\n        scopes\n        token\n        info {\n          accessedFrom {\n            ip\n            userAgent\n            isp\n            location\n            date\n            asn\n          }\n        }\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query Sessions($input: SessionInput) {\n    currentUser {\n      sessions(input: $input) {\n        id\n        type\n        createdAt\n        updatedAt\n        scopes\n        token\n        info {\n          accessedFrom {\n            ip\n            userAgent\n            isp\n            location\n            date\n            asn\n          }\n        }\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription UserStatus {\n    userStatus {\n      id\n      status\n      platforms {\n        platform\n        id\n        lastSeen\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription UserStatus {\n    userStatus {\n      id\n      status\n      platforms {\n        platform\n        id\n        lastSeen\n        status\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateStatus($input: UpdateUserStatusInput!) {\n    updateStatus(input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdateStatus($input: UpdateUserStatusInput!) {\n    updateStatus(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserQuery {\n    currentUser {\n      username\n      email\n      pulse\n      groupPrivacy\n      friendRequests\n      profileLayout\n      description\n      administrator\n      darkTheme\n      emailVerified\n      banned\n      createdAt\n      inviteId\n      discordPrecache\n      avatar\n      domainId\n      totpEnable\n      quota\n      moderator\n      subscriptionId\n      itemsPerPage\n      banner\n      pendingAutoCollects\n      scopes\n      alternatePasswords {\n        scopes\n        totp\n        name\n      }\n      status\n      storedStatus\n      weatherUnit\n      themeEngine\n      xp\n      publicProfile\n      privacyPolicyAccepted\n      plan {\n        quotaMax\n        color\n        internalName\n        name\n        icon\n        id\n      }\n      domain {\n        active\n        domain\n        id\n      }\n      badges {\n        color\n        icon\n        id\n        image\n        name\n        priority\n        tooltip\n      }\n      excludedCollections\n      id\n      language\n      nameColor\n      subscription {\n        metadata {\n          hours\n        }\n        cancelled\n      }\n      insights\n      notifications {\n        id\n        dismissed\n        message\n        route\n        createdAt\n      }\n      integrations {\n        type\n        providerUsername\n        providerUserId\n        id\n        error\n        expiresAt\n      }\n      homeWidgets {\n        rows {\n          widgets {\n            type\n            props\n          }\n        }\n        default\n      }\n    }\n    trackedUsers {\n      username\n      id\n      createdAt\n      administrator\n      moderator\n      avatar\n      blocked\n      status\n      nameColor\n      bot\n      nickname {\n        nickname\n      }\n    }\n    blockedUsers {\n      id\n      userId\n      createdAt\n      updatedAt\n      blockedUserId\n      silent\n    }\n  }\n"): (typeof documents)["\n  query GetUserQuery {\n    currentUser {\n      username\n      email\n      pulse\n      groupPrivacy\n      friendRequests\n      profileLayout\n      description\n      administrator\n      darkTheme\n      emailVerified\n      banned\n      createdAt\n      inviteId\n      discordPrecache\n      avatar\n      domainId\n      totpEnable\n      quota\n      moderator\n      subscriptionId\n      itemsPerPage\n      banner\n      pendingAutoCollects\n      scopes\n      alternatePasswords {\n        scopes\n        totp\n        name\n      }\n      status\n      storedStatus\n      weatherUnit\n      themeEngine\n      xp\n      publicProfile\n      privacyPolicyAccepted\n      plan {\n        quotaMax\n        color\n        internalName\n        name\n        icon\n        id\n      }\n      domain {\n        active\n        domain\n        id\n      }\n      badges {\n        color\n        icon\n        id\n        image\n        name\n        priority\n        tooltip\n      }\n      excludedCollections\n      id\n      language\n      nameColor\n      subscription {\n        metadata {\n          hours\n        }\n        cancelled\n      }\n      insights\n      notifications {\n        id\n        dismissed\n        message\n        route\n        createdAt\n      }\n      integrations {\n        type\n        providerUsername\n        providerUserId\n        id\n        error\n        expiresAt\n      }\n      homeWidgets {\n        rows {\n          widgets {\n            type\n            props\n          }\n        }\n        default\n      }\n    }\n    trackedUsers {\n      username\n      id\n      createdAt\n      administrator\n      moderator\n      avatar\n      blocked\n      status\n      nameColor\n      bot\n      nickname {\n        nickname\n      }\n    }\n    blockedUsers {\n      id\n      userId\n      createdAt\n      updatedAt\n      blockedUserId\n      silent\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VerifyEmail($token: String!) {\n    verifyEmail(token: $token)\n  }\n"): (typeof documents)["\n  mutation VerifyEmail($token: String!) {\n    verifyEmail(token: $token)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendVerificationEmail {\n    resendVerificationEmail\n  }\n"): (typeof documents)["\n  mutation SendVerificationEmail {\n    resendVerificationEmail\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWorkspaceFolder($input: CreateWorkspaceFolderInput!) {\n    createWorkspaceFolder(input: $input) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWorkspaceFolder($input: CreateWorkspaceFolderInput!) {\n    createWorkspaceFolder(input: $input) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateNote($input: CreateNoteInput!) {\n    createNote(input: $input) {\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n      }\n      permissions {\n        modify\n        read\n        configure\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateNote($input: CreateNoteInput!) {\n    createNote(input: $input) {\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n      }\n      permissions {\n        modify\n        read\n        configure\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWorkspace($input: String!) {\n    createWorkspace(input: $input) {\n      id\n      name\n      userId\n      createdAt\n      updatedAt\n      icon\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      folders {\n        id\n        createdAt\n        updatedAt\n        name\n        workspaceId\n        folderId\n        children {\n          id\n          createdAt\n          updatedAt\n          name\n          data {\n            version\n            blocks\n            time\n          }\n          metadata {\n            version\n          }\n          workspaceFolderId\n          shareLink\n          versions {\n            id\n            noteId\n            userId\n          }\n          permissions {\n            modify\n            read\n            configure\n          }\n        }\n        workspace {\n          id\n          name\n          userId\n          createdAt\n          updatedAt\n          icon\n        }\n      }\n      users {\n        id\n        createdAt\n        updatedAt\n        workspaceId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWorkspace($input: String!) {\n    createWorkspace(input: $input) {\n      id\n      name\n      userId\n      createdAt\n      updatedAt\n      icon\n      user {\n        username\n        id\n        createdAt\n        administrator\n        moderator\n        avatar\n      }\n      folders {\n        id\n        createdAt\n        updatedAt\n        name\n        workspaceId\n        folderId\n        children {\n          id\n          createdAt\n          updatedAt\n          name\n          data {\n            version\n            blocks\n            time\n          }\n          metadata {\n            version\n          }\n          workspaceFolderId\n          shareLink\n          versions {\n            id\n            noteId\n            userId\n          }\n          permissions {\n            modify\n            read\n            configure\n          }\n        }\n        workspace {\n          id\n          name\n          userId\n          createdAt\n          updatedAt\n          icon\n        }\n      }\n      users {\n        id\n        createdAt\n        updatedAt\n        workspaceId\n        read\n        write\n        configure\n        accepted\n        recipientId\n        senderId\n        identifier\n        sender {\n          username\n          id\n          createdAt\n          administrator\n          moderator\n          avatar\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Note($input: NoteInput!) {\n    note(input: $input) {\n      permissions {\n        modify\n        read\n        configure\n      }\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n        data {\n          version\n          blocks\n          time\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Note($input: NoteInput!) {\n    note(input: $input) {\n      permissions {\n        modify\n        read\n        configure\n      }\n      id\n      createdAt\n      updatedAt\n      name\n      data {\n        version\n        blocks\n        time\n      }\n      workspaceFolderId\n      shareLink\n      versions {\n        id\n        noteId\n        userId\n        data {\n          version\n          blocks\n          time\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveNote($input: SaveNoteInput!) {\n    saveNote(input: $input) {\n      id\n      name\n      workspaceFolderId\n    }\n  }\n"): (typeof documents)["\n  mutation SaveNote($input: SaveNoteInput!) {\n    saveNote(input: $input) {\n      id\n      name\n      workspaceFolderId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ToggleNoteShare($input: Int!) {\n    toggleNoteShare(input: $input) {\n      shareLink\n    }\n  }\n"): (typeof documents)["\n  mutation ToggleNoteShare($input: Int!) {\n    toggleNoteShare(input: $input) {\n      shareLink\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;